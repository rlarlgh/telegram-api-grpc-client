// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v5.26.0
// source: grpc/proto/teleg.proto

package telegpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TelegramApiClient is the client API for TelegramApi service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TelegramApiClient interface {
	StartServerPush(ctx context.Context, in *Empty, opts ...grpc.CallOption) (TelegramApi_StartServerPushClient, error)
	SendMessage(ctx context.Context, in *SendMessageRequest, opts ...grpc.CallOption) (*SendMessageResponse, error)
	SendKeyboard(ctx context.Context, in *SendKeyboardRequest, opts ...grpc.CallOption) (*SendKeyboardResponse, error)
	SendReplyInput(ctx context.Context, in *SendReplyInputRequest, opts ...grpc.CallOption) (*SendReplyInputResponse, error)
}

type telegramApiClient struct {
	cc grpc.ClientConnInterface
}

func NewTelegramApiClient(cc grpc.ClientConnInterface) TelegramApiClient {
	return &telegramApiClient{cc}
}

func (c *telegramApiClient) StartServerPush(ctx context.Context, in *Empty, opts ...grpc.CallOption) (TelegramApi_StartServerPushClient, error) {
	stream, err := c.cc.NewStream(ctx, &TelegramApi_ServiceDesc.Streams[0], "/grpc.telegpb.TelegramApi/StartServerPush", opts...)
	if err != nil {
		return nil, err
	}
	x := &telegramApiStartServerPushClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type TelegramApi_StartServerPushClient interface {
	Recv() (*ServerPushResponse, error)
	grpc.ClientStream
}

type telegramApiStartServerPushClient struct {
	grpc.ClientStream
}

func (x *telegramApiStartServerPushClient) Recv() (*ServerPushResponse, error) {
	m := new(ServerPushResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *telegramApiClient) SendMessage(ctx context.Context, in *SendMessageRequest, opts ...grpc.CallOption) (*SendMessageResponse, error) {
	out := new(SendMessageResponse)
	err := c.cc.Invoke(ctx, "/grpc.telegpb.TelegramApi/SendMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *telegramApiClient) SendKeyboard(ctx context.Context, in *SendKeyboardRequest, opts ...grpc.CallOption) (*SendKeyboardResponse, error) {
	out := new(SendKeyboardResponse)
	err := c.cc.Invoke(ctx, "/grpc.telegpb.TelegramApi/SendKeyboard", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *telegramApiClient) SendReplyInput(ctx context.Context, in *SendReplyInputRequest, opts ...grpc.CallOption) (*SendReplyInputResponse, error) {
	out := new(SendReplyInputResponse)
	err := c.cc.Invoke(ctx, "/grpc.telegpb.TelegramApi/SendReplyInput", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TelegramApiServer is the server API for TelegramApi service.
// All implementations must embed UnimplementedTelegramApiServer
// for forward compatibility
type TelegramApiServer interface {
	StartServerPush(*Empty, TelegramApi_StartServerPushServer) error
	SendMessage(context.Context, *SendMessageRequest) (*SendMessageResponse, error)
	SendKeyboard(context.Context, *SendKeyboardRequest) (*SendKeyboardResponse, error)
	SendReplyInput(context.Context, *SendReplyInputRequest) (*SendReplyInputResponse, error)
	mustEmbedUnimplementedTelegramApiServer()
}

// UnimplementedTelegramApiServer must be embedded to have forward compatible implementations.
type UnimplementedTelegramApiServer struct {
}

func (UnimplementedTelegramApiServer) StartServerPush(*Empty, TelegramApi_StartServerPushServer) error {
	return status.Errorf(codes.Unimplemented, "method StartServerPush not implemented")
}
func (UnimplementedTelegramApiServer) SendMessage(context.Context, *SendMessageRequest) (*SendMessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendMessage not implemented")
}
func (UnimplementedTelegramApiServer) SendKeyboard(context.Context, *SendKeyboardRequest) (*SendKeyboardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendKeyboard not implemented")
}
func (UnimplementedTelegramApiServer) SendReplyInput(context.Context, *SendReplyInputRequest) (*SendReplyInputResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendReplyInput not implemented")
}
func (UnimplementedTelegramApiServer) mustEmbedUnimplementedTelegramApiServer() {}

// UnsafeTelegramApiServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TelegramApiServer will
// result in compilation errors.
type UnsafeTelegramApiServer interface {
	mustEmbedUnimplementedTelegramApiServer()
}

func RegisterTelegramApiServer(s grpc.ServiceRegistrar, srv TelegramApiServer) {
	s.RegisterService(&TelegramApi_ServiceDesc, srv)
}

func _TelegramApi_StartServerPush_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TelegramApiServer).StartServerPush(m, &telegramApiStartServerPushServer{stream})
}

type TelegramApi_StartServerPushServer interface {
	Send(*ServerPushResponse) error
	grpc.ServerStream
}

type telegramApiStartServerPushServer struct {
	grpc.ServerStream
}

func (x *telegramApiStartServerPushServer) Send(m *ServerPushResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _TelegramApi_SendMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TelegramApiServer).SendMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.telegpb.TelegramApi/SendMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TelegramApiServer).SendMessage(ctx, req.(*SendMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TelegramApi_SendKeyboard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendKeyboardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TelegramApiServer).SendKeyboard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.telegpb.TelegramApi/SendKeyboard",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TelegramApiServer).SendKeyboard(ctx, req.(*SendKeyboardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TelegramApi_SendReplyInput_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendReplyInputRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TelegramApiServer).SendReplyInput(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.telegpb.TelegramApi/SendReplyInput",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TelegramApiServer).SendReplyInput(ctx, req.(*SendReplyInputRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TelegramApi_ServiceDesc is the grpc.ServiceDesc for TelegramApi service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TelegramApi_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "grpc.telegpb.TelegramApi",
	HandlerType: (*TelegramApiServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendMessage",
			Handler:    _TelegramApi_SendMessage_Handler,
		},
		{
			MethodName: "SendKeyboard",
			Handler:    _TelegramApi_SendKeyboard_Handler,
		},
		{
			MethodName: "SendReplyInput",
			Handler:    _TelegramApi_SendReplyInput_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StartServerPush",
			Handler:       _TelegramApi_StartServerPush_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "grpc/proto/teleg.proto",
}
